basePath: /api
definitions:
  models.Adoption:
    properties:
      address:
        type: string
      adoption_date:
        type: string
      created_at:
        type: string
      email:
        type: string
      experience:
        type: string
      has_other_pets:
        type: boolean
      id:
        type: string
      living_space:
        type: string
      name:
        type: string
      other_pets_details:
        type: string
      pet_id:
        type: string
      pet_name:
        type: string
      phone:
        type: string
      reason:
        type: string
      status:
        description: pending, approved, rejected
        type: string
      submission_date:
        type: string
      updated_at:
        type: string
      user_email:
        description: Email user yang mengajukan adopsi
        type: string
    type: object
  models.Appointment:
    properties:
      date:
        type: string
      id:
        type: string
      note:
        type: string
      pet_id:
        type: string
      service_id:
        type: string
    type: object
  models.Owner:
    properties:
      address:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  models.Pet:
    properties:
      age:
        type: integer
      gender:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      owner_id:
        type: string
      species:
        type: string
      status:
        description: available, pending, adopted
        type: string
    type: object
  models.Service:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: integer
    type: object
  models.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: 71423044@std.ulbi.ac.id
    name: API Support
    url: https://github.com/Fadhail
  description: This is a sample swagger for Fiber
  title: TES SWAGGER PEMROGRAMAN III
  version: "1.0"
paths:
  /adoptions:
    get:
      description: Get all adoptions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Adoption'
            type: array
      summary: Get all adoptions
      tags:
      - adoptions
    post:
      consumes:
      - application/json
      description: Create a new adoption
      parameters:
      - description: Adoption
        in: body
        name: adoption
        required: true
        schema:
          $ref: '#/definitions/models.Adoption'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Adoption'
      summary: Create a new adoption
      tags:
      - adoptions
  /adoptions/{id}:
    delete:
      description: Delete an adoption
      parameters:
      - description: Adoption ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Delete an adoption
      tags:
      - adoptions
    get:
      description: Get an adoption by ID
      parameters:
      - description: Adoption ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Adoption'
      summary: Get an adoption by ID
      tags:
      - adoptions
    put:
      consumes:
      - application/json
      description: Update an adoption
      parameters:
      - description: Adoption ID
        in: path
        name: id
        required: true
        type: string
      - description: Adoption
        in: body
        name: adoption
        required: true
        schema:
          $ref: '#/definitions/models.Adoption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Update an adoption
      tags:
      - adoptions
  /adoptions/my:
    get:
      description: Get all adoptions for the currently logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Adoption'
            type: array
      summary: Get adoptions for current user
      tags:
      - adoptions
  /adoptions/pet/{pet_id}:
    get:
      description: Get all adoptions for a specific pet
      parameters:
      - description: Pet ID
        in: path
        name: pet_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Adoption'
            type: array
      summary: Get adoptions by pet ID
      tags:
      - adoptions
  /adoptions/status:
    get:
      description: Get all adoptions filtered by status
      parameters:
      - description: Status (pending, approved, rejected)
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Adoption'
            type: array
      summary: Get adoptions by status
      tags:
      - adoptions
  /appointments:
    get:
      description: Get all appointments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Appointment'
            type: array
      summary: Get all appointments
      tags:
      - appointments
    post:
      consumes:
      - application/json
      description: Create a new appointment
      parameters:
      - description: Appointment
        in: body
        name: appointment
        required: true
        schema:
          $ref: '#/definitions/models.Appointment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Appointment'
      summary: Create a new appointment
      tags:
      - appointments
  /appointments/{id}:
    delete:
      description: Delete an appointment
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Delete an appointment
      tags:
      - appointments
    get:
      description: Get an appointment by ID with details
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Get an appointment by ID with details
      tags:
      - appointments
    put:
      consumes:
      - application/json
      description: Update an appointment
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: string
      - description: Appointment
        in: body
        name: appointment
        required: true
        schema:
          $ref: '#/definitions/models.Appointment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Update an appointment
      tags:
      - appointments
  /login:
    post:
      consumes:
      - application/json
      description: User login with email and password
      parameters:
      - description: Login details
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Success response
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - auth
  /owners:
    get:
      description: Get all owners
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Owner'
            type: array
      summary: Get all owners
      tags:
      - owners
    post:
      consumes:
      - application/json
      description: Create a new owner
      parameters:
      - description: Owner
        in: body
        name: owner
        required: true
        schema:
          $ref: '#/definitions/models.Owner'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Owner'
      summary: Create a new owner
      tags:
      - owners
  /owners/{id}:
    delete:
      description: Delete an owner
      parameters:
      - description: Owner ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Delete an owner
      tags:
      - owners
    get:
      description: Get an owner by ID
      parameters:
      - description: Owner ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Owner'
      summary: Get an owner by ID
      tags:
      - owners
    put:
      consumes:
      - application/json
      description: Update an owner
      parameters:
      - description: Owner ID
        in: path
        name: id
        required: true
        type: string
      - description: Owner
        in: body
        name: owner
        required: true
        schema:
          $ref: '#/definitions/models.Owner'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Update an owner
      tags:
      - owners
  /pets:
    get:
      description: Get all pets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Pet'
            type: array
      summary: Get all pets
      tags:
      - pets
    post:
      consumes:
      - multipart/form-data
      description: Create a new pet
      parameters:
      - description: Pet Name
        in: formData
        name: name
        required: true
        type: string
      - description: Pet Species
        in: formData
        name: species
        required: true
        type: string
      - description: Pet Age
        in: formData
        name: age
        required: true
        type: integer
      - description: Pet Gender
        in: formData
        name: gender
        required: true
        type: string
      - description: Owner ID
        in: formData
        name: owner_id
        required: true
        type: string
      - description: Pet Image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Pet'
      summary: Create a new pet
      tags:
      - pets
  /pets/{id}:
    delete:
      description: Delete a pet
      parameters:
      - description: Pet ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Delete a pet
      tags:
      - pets
    get:
      description: Get a pet by ID
      parameters:
      - description: Pet ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Pet'
      summary: Get a pet by ID
      tags:
      - pets
    put:
      consumes:
      - multipart/form-data
      description: Update a pet
      parameters:
      - description: Pet ID
        in: path
        name: id
        required: true
        type: string
      - description: Pet Name
        in: formData
        name: name
        required: true
        type: string
      - description: Pet Species
        in: formData
        name: species
        required: true
        type: string
      - description: Pet Age
        in: formData
        name: age
        required: true
        type: integer
      - description: Pet Gender
        in: formData
        name: gender
        required: true
        type: string
      - description: Owner ID
        in: formData
        name: owner_id
        required: true
        type: string
      - description: Pet Image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Update a pet
      tags:
      - pets
  /register:
    post:
      consumes:
      - application/json
      description: User registration with email, username, password, and role
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Unprocessable Entity
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: User registration
      tags:
      - auth
  /services:
    get:
      description: Get all services
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Service'
            type: array
      summary: Get all services
      tags:
      - services
    post:
      consumes:
      - application/json
      description: Create a new service
      parameters:
      - description: Service
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/models.Service'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Service'
      summary: Create a new service
      tags:
      - services
  /services/{id}:
    delete:
      description: Delete a service
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Delete a service
      tags:
      - services
    get:
      description: Get a service by ID
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Service'
      summary: Get a service by ID
      tags:
      - services
    put:
      consumes:
      - application/json
      description: Update a service
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      - description: Service
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/models.Service'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Update a service
      tags:
      - services
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
